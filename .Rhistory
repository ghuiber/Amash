pa <- 1
rep(pa,kate)
rep(pa,kate)*(1+r)
rep(pa,kate)*(1+r)^c(1:kate)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
getBigBalance <- function(pa=5000,time,growth=r,discount=d) {
savingstream   <- rep(pa,time)*(1+growth)
compoundstream <- savingstream^c(1:time)
futurevalue    <- sum(compoundstream)
discountfactor <- (1+discount)^time
presentvalue   <- futurevalue/discountfactor
return(presentvalue)
}
kate.balance  <- getBigBalance(pa=440*13, time=kate) + kate.start
isaac.balance <- getBigBalance(pa=430*13, time=isaac) + isaac.start
getBigBalance <- function(pa=5000,time,growth=r,discount=d) {
savingstream   <- rep(pa,time)*(1+growth)^c(1:time)
futurevalue    <- sum(savingstream)
discountfactor <- (1+discount)^time
presentvalue   <- futurevalue/discountfactor
return(presentvalue)
}
kate.balance  <- getBigBalance(pa=440*13, time=kate) + kate.start
isaac.balance <- getBigBalance(pa=430*13, time=isaac) + isaac.start
source('~/.active-rstudio-document')
getBalance(pa=990*12,time=kate,growth=0,discount=.04)
getBalance(pa=999*12,time=kate,growth=0,discount=.04)+kate.start
getBalance(pa=999*12,time=kate,growth=.01,discount=.04)+kate.start
getBalance(pa=999*12,time=kate,growth=.02,discount=.04)+kate.start
getBalance(pa=999*12,time=kate,growth=.03,discount=.04)+kate.start
getBalance(pa=999*12,time=kate,growth=.04,discount=.04)+kate.start
getBalance(pa=999*12,time=kate,growth=.05,discount=.04)+kate.start
getBalance(pa=999*12,time=kate,growth=.06,discount=.04)+kate.start
getBalance(pa=999*12,time=kate,growth=.055,discount=.04)+kate.start
22000*4
22000*4*(1.04^13)
getBalance <- function(pa=5000,time,growth=r,discount=d) {
savingstream   <- rep(pa,time)*(1+growth)^c(1:time)
futurevalue    <- sum(savingstream)
discountfactor <- (1+discount)^time
presentvalue   <- futurevalue/discountfactor
return(futurevalue)
}
getBalance <- function(pa=5000,time,growth=r,discount=d) {
savingstream   <- rep(pa,time)*(1+growth)^c(1:time)
futurevalue    <- sum(savingstream)
discountfactor <- (1+discount)^time
presentvalue   <- futurevalue/discountfactor
return(futurevalue)
}
kate.balance  <- getBalance(pa=440*13, time=kate) + kate.start
isaac.balance <- getBalance(pa=430*13, time=isaac) + isaac.start
22000*4*(1.03^13)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
getBalance(pa=440*13, time=kate)
getBalance(pa=450*13, time=kate)
getBalance(pa=500*13, time=kate)
getBalance(pa=550*13, time=kate)
source('~/Documents/SpiderOak/Team Huiber/saving_for_college.R')
source('~/Documents/SpiderOak/Team Huiber/saving_for_college.R')
source('~/Documents/SpiderOak/Team Huiber/saving_for_college.R')
source('~/Documents/SpiderOak/Team Huiber/saving_for_college.R')
source('~/Documents/SpiderOak/Team Huiber/saving_for_college.R')
source('~/Documents/SpiderOak/Team Huiber/saving_for_college.R')
source('~/Documents/SpiderOak/Team Huiber/saving_for_college.R')
source('~/Documents/SpiderOak/Team Huiber/saving_for_college.R')
source('~/.active-rstudio-document')
source('~/Documents/SpiderOak/Team Huiber/saving_for_college.R')
source('~/Documents/SpiderOak/Team Huiber/expenses201411.R')
sum(foo[,Amount]) # i was reimbursed for this
sum(bar[,Amount]) # we spent this
View(bar)
source('~/.active-rstudio-document')
source('~/Documents/SpiderOak/Team Huiber/expenses201411.R')
View(bar)
install.packages(c("arules", "BoomSpikeSlab", "bsts", "DataCombine", "digest", "doBy", "effects", "fitdistrplus", "network", "prodlim", "RColorBrewer", "RCurl", "reshape2", "shiny", "stabs", "tidyr", "VGAM"))
1071/12
library(data.table)
# raw credit card statement from Chase
dt <- fread('~/Documents/SpiderOak/Team Huiber/ChaseVisa20141115.CSV')
dt <- fread('~/Documents/SpiderOak/Team Huiber/capitalOneChecking_ytd20141215.csv')
head(dt)
sum(dt[,'Transaction Amount'])
names(dt)
sum(dt[['Transaction Amount']])
dt['Transaction Description' %like% 'Withdrawal from CHASE',list('Transaction Amount','Transaction Date')]
names(dt) <- gsub(' ','\\.',names(dt))
names(dt)
dt[Transaction.Description %like% 'Withdrawal from CHASE',list(Transaction.Amount,Transaction.Date)]
dt[Transaction.Description %like% 'Withdrawal from CHASE',list('Transaction.Amount','Transaction.Date')]
dt[Transaction.Description %like% 'Withdrawal from CHASE',(Transaction.Amount,Transaction.Date)]
subset(dt,Transaction.Description %like% 'Withdrawal from CHASE',select=c(Transaction.Amount,Transaction.Date))
head(dt)
subset(dt,.Transaction.Description %like% 'Withdrawal from CHASE',select=c(Transaction.Amount,Transaction.Date))
subset(dt,.Transaction.Description %like% c('Withdrawal from CHASE','Withdrawal from AMEX'),select=c(Transaction.Amount,Transaction.Date))
subset(dt,.Transaction.Description %like% 'Withdrawal from CHASE',select=c(Transaction.Amount,Transaction.Date))
subset(dt,.Transaction.Description %like% 'Withdrawal from CHASE')[,sum(Transaction.Amount)]
subset(dt,.Transaction.Description %like% 'Withdrawal from AMEX')[,sum(Transaction.Amount)]
subset(dt,Transaction.Amount>0)[,sum(Transaction.Amount)]
head(dt)
head(dt,n=20)
head(dt,n=40)
paychecks <- subset(dt,.Transaction.Description=='Deposit from Accenture  LLP PAYRLL DEP')[,sum(Transaction.Amount)]
paychecks
paychecks - visa - amex
library(data.table)
# transactions from checking account. that's where all money I earn goes first.
dt <- fread('~/Documents/SpiderOak/Team Huiber/capitalOneChecking_ytd20141215.csv')
setnames(dt,old=names(dt),new=gsub(' ','\\.',names(dt)))
visa   <- subset(dt,.Transaction.Description %like% 'Withdrawal from CHASE')[,sum(Transaction.Amount)]
amex   <- subset(dt,.Transaction.Description %like% 'Withdrawal from AMEX')[,sum(Transaction.Amount)]
income <- subset(dt,Transaction.Amount>0)[,sum(Transaction.Amount)]
paychecks - visa - amex
paychecks + visa + amex
head(dt,n=40)
source('~/.active-rstudio-document')
paychecks+payments
mortgage
mortgage + visa + amex
paychecks + payments + visa + mortgage + amex
subset(dt,.Transaction.Description %like% 'Goddard')
source('~/.active-rstudio-document')
plus
minus
subset(dt,.Transaction.Description %like% 'Duke')
subset(dt,.Transaction.Description %like% 'Duke Energy')
subset(dt,.Transaction.Description %like% 'PSNC')
subset(dt,.Transaction.Description %like% 'Water')
subset(dt,.Transaction.Description %like% 'Sewer')
subset(dt,.Transaction.Description %like% 'Durham')
source('~/.active-rstudio-document')
plus
minus
power
gas
water
tax
plus.items  <- c('Deposit from Accenture  LLP PAYRLL DEP',
'Deposit from ACCENTURE LLP PAYMENTS')
minus.items <- c('Withdrawal from CHASE','Withdrawal from AMEX',
'Preauthorized Withdrawal to Internal mortgage system',
'Goddard','Duke Energy','PSNC Energy',
'City of Durham','Durham County Tax Collector')
sapply(plus.items,function(x) subset(dt,.Transaction.Description %like% x))
lapply(plus.items,function(x) subset(dt,.Transaction.Description %like% x))
do.call(rbind(lapply(plus.items,function(x) subset(dt,.Transaction.Description %like% x))))
foo <- lapply(plus.items,function(x) subset(dt,.Transaction.Description %like% x))
do.call(rbind(foo))
do.call(rbind,foo)
do.call(rbind,lapply(plus.items,function(x) subset(dt,.Transaction.Description %like% x)))
source('~/.active-rstudio-document')
length(minus.items)
dt[!rbind(pluses,minuses)]
dt[!minuses]
View(dt)
setkey(dt,Transaction.ID)
dt[!minuses]
dt[!rbind(pluses,minuses)]
source('~/.active-rstudio-document')
nrow(dt)
nrow(pluses)
nrow(minuses)
nrow(left)
keys()
keys(pluses)
key(pluses)
source('~/.active-rstudio-document')
dim(dt)
dim(dt[!pluses])
dim(dt[!minuses])
source('~/Documents/SpiderOak/Team Huiber/expenses2014checking.R')
View(left)
source('~/.active-rstudio-document')
source('~/Documents/SpiderOak/Team Huiber/expenses2014checking.R')
insurance
plus
minus
plus + minus
View(left)
source('~/Documents/SpiderOak/Team Huiber/expenses2014checking.R')
plus
minus
plus + minus
paychecks
payments
View(left)
subset(dt,.Transaction.Description %like% 'Liberty Mutual')
mortgage
gottahave <- mortgage + goddard + power + gas + water + tax + insurance
gottahave
goddard
gottahave - goddard
gottahave / 26
subset(dt,.Transaction.Description %like% 'Goddard')
source('~/Documents/SpiderOak/Team Huiber/expenses2014checking.R')
gottahave
gottahave / 26
gottahave
source('~/Documents/SpiderOak/Team Huiber/expenses2014checking.R')
gottahave
goddard2015
source('~/Documents/SpiderOak/Team Huiber/expenses2014checking.R')
mortgage
source('~/Documents/SpiderOak/Team Huiber/expenses2014checking.R')
gottahave
gottahave / 26
mortgage
power
gas
water
tax
insurance
vzw
source('~/Documents/SpiderOak/Team Huiber/expenses2014checking.R')
gottahave
gottahave / 26
mortgage
power
gas
water
tax
insurance
vzw
twc
goddard2015
gottahave / 16
gottahave / 26
gottahave / 26 + 300
source('~/Documents/SpiderOak/Team Huiber/expenses2014checking.R')
gottahave / 26
330*26
paychecks
paychecks / 26
subset(dt,.Transaction.Description=='Deposit from Accenture  LLP PAYRLL DEP')
330*26
- 330*26 - mortgage - tax
source('~/Documents/SpiderOak/Team Huiber/expenses2014checking.R')
names(left)
left[,.Transaction.Description]
gottahave
gottahave - college2015
gottahave + college2015
gottahave + college2015 + goddard2015
- (college2015 + goddard2015)
college2015
goddard2015
# Per paycheck:
gottahave / 26
visa
amex
mortgage
goddard
power
gas
water
(power+gas+water+vzw+twc)
(power+gas+water+vzw+twc)/26
(power+gas+water+vzw+twc)/12
(power+gas+water+vzw+twc+insurance)/12
(power+gas+water+vzw+twc+insurance+tax)/12
vzw
twc
install.packages(c("httr", "roxygen2", "stringi"))
syncR::syncPacks()
source('~/Documents/SpiderOak/Team Huiber/expenses2014checking.R')
gottahave / 26
mortgage
View(dt)
vet
tax
subset(dt,.Transaction.Description %like% 'Durham County Tax Collector')
dim(dt)
dim(left)
left[,sum(Transaction.Amount)]
minus
install.packages(c("BH", "compare", "digest", "forecast", "googleVis", "mboost", "mvtnorm", "packrat", "quantmod", "RJDBC", "rmarkdown", "yhatr"))
install.packages(c("countrycode", "digest", "httr", "lazyeval", "manipulate", "maxLik", "ordinal", "RcppArmadillo", "RcppEigen", "rstudioapi", "rvest", "selectr", "vcdExtra"))
?syncR
??syncR
getOption("github.user")
syncR::publishGithub('Amash')
getwd()
syncR::publishGithub(repo='Amash')
syncR::publishGithub
getwd()
setwd(Documents/GitHub/Amash)
setwd('Documents/GitHub/Amash')
getwd()
syncR::publishGithub(repo='Amash')
syncR::publishGithub(repo='Amash')
rm(ls())
rm(list=ls())
library(ggplot2)
library(Zelig)
# Read raw data
df <- read.csv('amashvotevsmoney.csv',header=T,sep="|",stringsAsFactors=F,strip.white=T)
# Clean up a bit
df$Amount <- as.numeric(gsub("\\$|,","", df$Amount)) # make dollars numeric
names(df)[3] <- 'District'                           # shorten district name
df <- df[df$Vote!='Not Voting',]                     # drop abstainers (I want 2 categories for Wilcoxon rank-sum test)
incr <- 5000
maxd <- 200000
# Now estimate prob of voting No as a function of Party and Amount. Use Zelig.
df$Vote  <- factor(df$Vote, levels=c('Yes','No'))
df$Party <- factor(df$Party)
z1.out <- zelig(Vote ~ Party + Amount, data=df, model="logit", cite=FALSE)
z2.out <- zelig(Vote ~ Party + Amount + Party*Amount, data=df, model="logit", cite=FALSE)
getSims <- function(z.out) {
x.R <- setx(z.out,Party='R',Amount=seq(0,maxd,incr))
x.D <- setx(z.out,Party='D',Amount=seq(0,maxd,incr))
s.out <- sim(z.out,x=x.D,x1=x.R)
s.D   <- sim(z.out,x=x.D,x1=x.R)
s.R   <- sim(z.out,x=x.R,x1=x.D)
c <- list(x.R,x.D,s.out,s.D,s.R)
names(c) <- c('x.R','x.D','s.out','s.D','s.R')
return(c)
}
m1 <- getSims(z1.out)
m2 <- getSims(z2.out)
head(df)
names(m1)
names(z1)
names(z1.out)
names(z1.out$result)
head(z1.out$result$fitted.values)
head(z1.out$result$data)
z1.out$result$formula
table(z1.out$result$data$Vote)
str(z1.out$result$data$Vote)
table(as.integer(z1.out$result$data$Vote))
table(as.integer(z1.out$result$data$Party))
table(z1.out$result$data$Party)
sapply(z1.out$result$data,class)
?zelig::sim
??zelig::sim
??Zelig::sim
??sim
names(m1$s.out)
names(m1$s.out[[1]])
head(names(m1$s.out[[1]][['x']]))
head(names(m1$s.out[[1]][['x']][['data']]))
head(m1$s.out[[1]][['x']][['data']])
dim(m1$s.out[[1]][['x']][['data']])
head(m1$s.out[[2]][['x']][['data']])
sapply(m1$s.out,class)
sapply(m1$s.out[[1]],class)
names(m1$s.out[[1]])
m1$s.out[[1]][['model']]
m1$s.out[[1]][['x']]
m1$s.out[[1]][['x1']]
names(z1.out)
??setx
names(m1)
names(m1$x.R)
names(m1$x.R[[1]])
library("WhatIf", lib.loc="~/Rlibs")
summary(whatif(data = z1.out, cfact = m1[['x.R']]))
sapply(m1$x.R,class)
sapply(m1$x.R[[1]],class)
class(m1$x.R[[1]])
class(m1$x.R)
str(m1$x.R)
sapply(m1$x.R[[1]],class)
head(m1$x.R[[1]][,class][['updated']])
head(m1$x.R[[1]][['updated']])
tail(m1$x.R[[1]][['updated']])
tail(m1$x.R[[1]][['data']])
dim(m1$x.R[[1]])
library("pryr", lib.loc="~/Rlibs")
otype(m1)
otype(m1$x.R)
methods(m1$x.R)
methods(class='m1$x.R')
names(m1$x.R)
names(m1$x.R[[1]])
dim(m1$x.R[[1]][['data']])
dim(m1$x.R[[1]][['new.data']])
head(m1$x.R[[1]][['new.data']])
head(m1$x.R[[1]][['values']])
head(m1$x.R[[1]][['pred']])
head(m1$x.R[[1]][['formuls']])
head(m1$x.R[[1]][['formula']])
dim(m1$x.R[[1]][['data']])
m1$x.R[[1]][['data']]
m1$x.R[[2]][['data']]
m1$x.R[[2]][['values']]
m1$x.R[[2]][['explan']]
m1$x.R[[2]][['pred']]
m1$x.R[[2]][['special.parameters']]
m1$x.R[[2]][['symbolic.parameters']]
otype(m1$x.R[[1]])
names(m1$x.R)
sapply(m1$x.R,class)
sapply(m1$x.R[[1]],class)
sapply(m1$x.D[[1]],class)
head(m1$x.R[[1]][['new.data']])
head(m1$x.D[[1]][['new.data']])
otype(m1$x.R)
otype(m1$s.R)
names(m1$s.R)
otype(m1$s.R[[1]])
names(m1$s.R[[1]])
head(m1$s.R[[1]][['cond.data']])
head(m1$s.R[[1]][['x']])
trythis1 <- setx(z1.out,Party='R')
summary(whatif(data = z1.out, cfact = trythis1))
summary(whatif(data = z1.out, cfact = 'trythis1'))
names(trythis1)
summary(whatif(data = z1.out, cfact = trythis1$new.data))
head(trythis1$new.data)
sapply(trythis1$new.data,class)
summary(whatif(data = z1.out, cfact = subset(trythis1$new.data,select=-c(Name,District))))
names(m1$s.R[[1]])
names(m1$s.R[[1]][['qi']])
names(m1$s.R[[1]][['qi']][[1]])
head(m1$s.R[[1]][['qi']][[1]])
head(m1$s.R[[1]][['qi']][[1]][[2]])
head(m1$s.R[[1]][['qi']][[1]])
head(m1$s.R[[1]][['qi']][[2]])
head(m1$s.D[[1]][['qi']][[2]])
head(m1$s.R[[1]][['qi']][[2]])
head(m1$s.R[[1]][['qi']][[1]])
length(m1$s.R[[1]][['qi']][[1]])
names(m1$s.R
)
names(m1$s.R[[1]])
length(m1$s.R[[1]])
names(m1$s.R[[1]])
names(m1$s.R[[1]][['qi']])
sapply(m1$s.R[[1]][['qi']],dim)
length(m1$s.R)
maxd/incr
head(m1$s.R[[1]][['qi']][[1]])
head(m1$s.D[[1]][['qi']][[1]])
head(m1$s.R[[1]][['qi']][[1]])
head(m1$s.D[[1]][['qi']][[2]])
names(m1$x.R)
names(m1$x.R[[1]])
names(m1$x.R[[1]]$data)
dim(m1$x.R[[1]]$data)
dim(m1$x.R[[1]]$new.data)
for(i in c(1:41)) print(dim(m1$x.R[[i]]$new.data))
dim(df)
dim(m1$x.R[[1]]$new.data)
diff(df,m1$x.R[[1]]$new.data)
setdiff(df,m1$x.R[[1]]$new.data)
head(df)
head(m1$x.R[[1]]$new.data)
sapply(m1$s.R[[1]][['qi']],dim)
sapply(m1$s.R[[1]][['qi']],head)
sapply(m1$s.R[[1]][['qi']],tail)
sapply(m1$s.R[[1]][['qi']][c('pv1','pv2')],mean)
sapply(m1$s.R[[1]][['qi']][[c('pv1','pv2')]],mean)
otype(m1$s.R[[1]][['qi']])
names(m1$s.R[[1]][['qi']])
mean(m1$s.R[[1]][['qi']][[3]])
head(m1$s.R[[1]][['qi']][[3]])
head(as.integer(m1$s.R[[1]][['qi']][[3]]))
mean(as.integer(m1$s.R[[1]][['qi']][[3]]))
mean(as.integer(m1$s.R[[1]][['qi']][[4]]))
names(m1$x.R)
names(m1$x.R[[1]])
names(m1$x.R[[1]][['new.data']])
dim(m1$x.R[[1]][['new.data']])
head(cbind(df,m1$x.R[[1]]$new.data))
head(cbind(df,m1$x.R[[1]]$new.data,dups=dupRows))
head(duplicated(cbind(df,m1$x.R[[1]]$new.data)))
table(duplicated(cbind(df,m1$x.R[[1]]$new.data)))
?duplicated
library("compare", lib.loc="~/Rlibs")
?compare
compare(df,m1$x.R[[1]]$new.data)
compare(df,'gerbils')
names(m1$x.R[[1]])
names(m1$x.R[[1]][['matrix']])
m1$x.R[[1]][['matrix']]
m1$x.R[[1]][['values']]
m1$x.R[[1]][['pred']]
m1$x.R[[1]][['updated']]
m1$x.R[[2]][['updated']]
m1$x.D[[2]][['updated']]
m1$x.D[[1]][['updated']]
m1$x.D[[1]][['name']]
m1$x.D[[1]][['call']]
head(m1$x.D[[1]][['new.data']])
tail(m1$x.D[[1]][['new.data']])
names(m1$s.R[[1]])
names(m1$s.R[[1]][['qi']])
names(m1$s.R[[1]][['x']])
head(m1$s.R[[1]][['x']][['new.data']])
head(m1$s.R[[1]][['x1']][['new.data']])
head(m1$s.R[[1]][['x1']][['updated']])
head(m1$s.R[[1]][['x']][['updated']])
names(m1$s.R[[1]][['x']])
names(m1$s.R[[1]])
names(m1$x.R[[1]])
compare(m1$s.R[[1]][['x']],m1$x.R[[1]])
compare(m1$s.R[[1]][['x1']],m1$x.R[[1]])
compare(m1$s.R[[1]][['x1']],m1$x.D[[1]])
compare(m1$s.D[[1]][['x1']],m1$x.R[[1]])
names(m1$s.R)
names(m1$s.R[[1]])
m1$s.R[[1]]$model
names(m1$s.R[[1]]$x)
head(m1$s.R[[1]]$x$new.data)
head(m1$s.R[[1]]$x1$new.data)
compare(m1$s.R[[1]]$x1$new.data,m1$s.R[[1]]$x$new.data)
sapply(m1$s.R[[1]]$x,class)
m1$s.R[[1]]$x$values
m1$s.R[[1]]$x$updated
